name: Migrate

on:
  workflow_call:

jobs:
  migrate:
    name: Run DB Migrations
    runs-on: ubuntu-latest

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      APPDATA: "/tmp"
      SQL_SERVER: localhost
      SQL_PORT: 1433
      SQL_USER: sa
      SQL_PASSWORD: YourStrong!Passw0rd
      SQL_DATABASE: ShoppingCartManagerDB

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ./ShoppingCartManager.sln

      - name: Build
        run: dotnet build ./ShoppingCartManager.sln --configuration Release --no-restore

      - name: Start SQL Server
        run: |
          cd ${{ github.workspace }}
          docker compose -f docker-compose.ci.yml up -d db-sqlserver
          echo "Waiting for SQL Server to be ready..."
          sleep 25

      - name: Create SQL Server database
        run: |
          docker exec db-sqlserver /opt/mssql-tools/bin/sqlcmd \
            -S ${{ env.SQL_SERVER }} -U ${{ env.SQL_USER }} -P ${{ env.SQL_PASSWORD }} \
            -Q "IF DB_ID('${{ env.SQL_DATABASE }}') IS NULL CREATE DATABASE ${{ env.SQL_DATABASE }}"

      - name: Install FluentMigrator CLI
        run: dotnet tool install --global FluentMigrator.DotNet.Cli

      - name: Apply migrations
        run: |
          dotnet fm migrate \
            -a ./src/ShoppingCartManager.Persistence/bin/Release/net9.0/ShoppingCartManager.Persistence.dll \
            -p sqlserver \
            -c "Server=${{ env.SQL_SERVER }},${{ env.SQL_PORT }};Database=${{ env.SQL_DATABASE }};User Id=${{ env.SQL_USER }};Password=${{ env.SQL_PASSWORD }};TrustServerCertificate=true"

      - name: Stop SQL Server
        if: always()
        run: |
          cd ${{ github.workspace }}
          docker compose -f docker-compose.ci.yml down
